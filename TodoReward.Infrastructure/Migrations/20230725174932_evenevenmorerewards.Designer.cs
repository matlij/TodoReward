// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoReward.Infrastructure;

#nullable disable

namespace TodoReward.Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230725174932_evenevenmorerewards")]
    partial class evenevenmorerewards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("TodoReward.Core.Models.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Propability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15562c37-977a-47ac-a7a6-538193334e3e"),
                            Description = "",
                            Propability = 10,
                            Title = "Go on a Weekend trip"
                        },
                        new
                        {
                            Id = new Guid("8035dc79-45ca-4957-ac0b-7136fcb5ed01"),
                            Description = "",
                            Propability = 1000,
                            Title = "One episode on TV"
                        },
                        new
                        {
                            Id = new Guid("ebbce4a9-1aae-4bb3-9c5f-3a6f6e4417e2"),
                            Description = "",
                            Propability = 1000,
                            Title = "One movie on TV"
                        },
                        new
                        {
                            Id = new Guid("9cc2bcab-d8a2-4586-82a0-a2f2a894d90d"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min gaming"
                        },
                        new
                        {
                            Id = new Guid("ca13880f-b70b-43f1-9c8f-1bac90542540"),
                            Description = "",
                            Propability = 1000,
                            Title = "One podcast episode"
                        },
                        new
                        {
                            Id = new Guid("085bc056-006b-47e3-8ddb-2db3e20d8c78"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min book reading"
                        },
                        new
                        {
                            Id = new Guid("0d462a81-f987-4f9e-8ab2-52dfc18e8c66"),
                            Description = "",
                            Propability = 1000,
                            Title = "Beer"
                        },
                        new
                        {
                            Id = new Guid("92d35d69-7505-4ec6-ab90-19860e1b8633"),
                            Description = "",
                            Propability = 200,
                            Title = "Glas of Wine"
                        },
                        new
                        {
                            Id = new Guid("6dc76e06-99b5-45d3-8c54-081d62898a73"),
                            Description = "",
                            Propability = 500,
                            Title = "Candy"
                        },
                        new
                        {
                            Id = new Guid("496e58cf-b3fe-4efa-93f4-761d3c2ca382"),
                            Description = "",
                            Propability = 500,
                            Title = "Soda"
                        },
                        new
                        {
                            Id = new Guid("98695360-281f-4932-b95f-473fe19c5f02"),
                            Description = "",
                            Propability = 1000,
                            Title = "Coffea"
                        },
                        new
                        {
                            Id = new Guid("be8faab0-eb48-4523-bce6-e03af09ee760"),
                            Description = "",
                            Propability = 1000,
                            Title = "Tea"
                        },
                        new
                        {
                            Id = new Guid("b9fee397-daa3-4624-ae39-74681882723c"),
                            Description = "",
                            Propability = 100,
                            Title = "Outside lunch"
                        },
                        new
                        {
                            Id = new Guid("cd122a8d-6d61-43cc-b1f2-2c3f5b1535b3"),
                            Description = "",
                            Propability = 100,
                            Title = "Dessert after dinner"
                        },
                        new
                        {
                            Id = new Guid("4841e316-49ed-4e26-bd93-d874b614d6a1"),
                            Description = "",
                            Propability = 200,
                            Title = "Home made Pizza"
                        },
                        new
                        {
                            Id = new Guid("583b142a-d5c6-4d70-887f-b9b3d277c407"),
                            Description = "",
                            Propability = 100,
                            Title = "Cinema"
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsRewarded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b"),
                            TotalPoints = 0,
                            TotalPointsRewarded = 0
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5145485-b272-4cbc-a02d-b884771752dd"),
                            IsDone = false,
                            RewardId = new Guid("15562c37-977a-47ac-a7a6-538193334e3e"),
                            UserId = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b")
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.HasOne("TodoReward.Core.Models.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoReward.Core.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
