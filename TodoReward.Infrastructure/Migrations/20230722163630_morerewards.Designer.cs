// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoReward.Infrastructure;

#nullable disable

namespace TodoReward.Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230722163630_morerewards")]
    partial class morerewards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("TodoReward.Core.Models.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Propability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ced0f252-ac53-4dd5-92dd-b638e1f26166"),
                            Description = "",
                            Propability = 1000,
                            Title = "15 min streaming"
                        },
                        new
                        {
                            Id = new Guid("14110cf4-c6df-4ad0-9896-f2e810ba97fd"),
                            Description = "",
                            Propability = 500,
                            Title = "15 min gaming"
                        },
                        new
                        {
                            Id = new Guid("5fa2a748-eda6-40d0-8483-b4e7810b03b1"),
                            Description = "",
                            Propability = 1000,
                            Title = "30 min podcast"
                        },
                        new
                        {
                            Id = new Guid("c8b940bc-ea11-4374-9459-40e01ba45655"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min book reading"
                        },
                        new
                        {
                            Id = new Guid("cdf7ecd9-65a3-4018-9977-74b17972cc32"),
                            Description = "",
                            Propability = 1000,
                            Title = "One beer"
                        },
                        new
                        {
                            Id = new Guid("10266726-06d6-4436-b50c-4681ba4e54d2"),
                            Description = "",
                            Propability = 500,
                            Title = "One candy"
                        },
                        new
                        {
                            Id = new Guid("eb487fb3-db38-49da-9589-6f2e4e094163"),
                            Description = "",
                            Propability = 500,
                            Title = "One soda"
                        },
                        new
                        {
                            Id = new Guid("9f382d1f-2c4b-4ab0-b1b6-630ae81c2756"),
                            Description = "",
                            Propability = 1000,
                            Title = "One cup of coffea"
                        },
                        new
                        {
                            Id = new Guid("a4ad72ee-2819-4b2a-8b85-b276a8603384"),
                            Description = "",
                            Propability = 1000,
                            Title = "One cup of tea"
                        },
                        new
                        {
                            Id = new Guid("18e123fb-c137-4d13-848e-02dfda142035"),
                            Description = "",
                            Propability = 100,
                            Title = "Outside lunch"
                        },
                        new
                        {
                            Id = new Guid("e618ff57-83e1-457e-b84e-90c6c804b82b"),
                            Description = "",
                            Propability = 100,
                            Title = "Dessert after dinner"
                        },
                        new
                        {
                            Id = new Guid("554472ee-c6ea-4b5b-bee1-3b89127ce09c"),
                            Description = "",
                            Propability = 200,
                            Title = "Home made Pizza"
                        },
                        new
                        {
                            Id = new Guid("17e67d46-272d-4e35-ba74-e15c33d242e8"),
                            Description = "",
                            Propability = 10,
                            Title = "Weekend"
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsRewarded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b"),
                            TotalPoints = 0,
                            TotalPointsRewarded = 0
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab7d62f2-86fb-4170-b106-48e9c74bc428"),
                            IsDone = false,
                            RewardId = new Guid("ced0f252-ac53-4dd5-92dd-b638e1f26166"),
                            UserId = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b")
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.HasOne("TodoReward.Core.Models.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoReward.Core.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
