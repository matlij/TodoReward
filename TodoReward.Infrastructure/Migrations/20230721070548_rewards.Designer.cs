// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoReward.Infrastructure;

#nullable disable

namespace TodoReward.Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230721070548_rewards")]
    partial class rewards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("TodoReward.Core.Models.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17a2923-5740-46e4-aca8-e9e5b1357de1"),
                            Description = "",
                            Title = "15 min streaming"
                        },
                        new
                        {
                            Id = new Guid("40329088-69a8-4f90-b236-4aad5c5a5ffa"),
                            Description = "",
                            Title = "15 min gaming"
                        },
                        new
                        {
                            Id = new Guid("4fcb7677-7a2c-4cb6-addc-4f404ebc65fc"),
                            Description = "",
                            Title = "30 min podcast"
                        },
                        new
                        {
                            Id = new Guid("cddba36a-449e-4272-bfa2-cf68d3bb8c75"),
                            Description = "",
                            Title = "One beer"
                        },
                        new
                        {
                            Id = new Guid("3c85a296-29f5-441d-a3a1-f5bb4821def5"),
                            Description = "",
                            Title = "One candy"
                        },
                        new
                        {
                            Id = new Guid("fbb2b8cb-3d69-4389-a2d1-35ad1e50f354"),
                            Description = "",
                            Title = "One soda"
                        },
                        new
                        {
                            Id = new Guid("60b5108e-97b3-4f55-a9cb-f89048ab7875"),
                            Description = "",
                            Title = "One cup of coffea"
                        },
                        new
                        {
                            Id = new Guid("062a0330-3dc5-44a1-8c0d-8497d1cbd953"),
                            Description = "",
                            Title = "One cup of tea"
                        },
                        new
                        {
                            Id = new Guid("7e8728e5-fd75-4ca9-ba0b-d990033f6e82"),
                            Description = "",
                            Title = "Outside lunch"
                        },
                        new
                        {
                            Id = new Guid("2ef7d9ef-42da-4e1a-9e5f-70c9a81ebed0"),
                            Description = "",
                            Title = "Dessert after dinner"
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsRewarded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b"),
                            TotalPoints = 0,
                            TotalPointsRewarded = 0
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b16153e-9b3d-4696-b62c-b58e5e9c9e4c"),
                            IsDone = false,
                            RewardId = new Guid("d17a2923-5740-46e4-aca8-e9e5b1357de1"),
                            UserId = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b")
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.HasOne("TodoReward.Core.Models.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoReward.Core.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
