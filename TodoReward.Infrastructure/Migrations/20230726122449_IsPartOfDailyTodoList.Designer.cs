// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoReward.Infrastructure;

#nullable disable

namespace TodoReward.Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230726122449_IsPartOfDailyTodoList")]
    partial class IsPartOfDailyTodoList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("TodoReward.Core.Models.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Propability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6959ec84-aa12-4182-abdb-10d001f43228"),
                            Description = "",
                            Propability = 10,
                            Title = "Go on a Weekend trip"
                        },
                        new
                        {
                            Id = new Guid("9110accc-a8f8-4588-8f92-f56bd80dd54c"),
                            Description = "",
                            Propability = 1000,
                            Title = "One episode on TV"
                        },
                        new
                        {
                            Id = new Guid("4a695991-43eb-4842-add4-8e21a107ee1b"),
                            Description = "",
                            Propability = 1000,
                            Title = "One movie on TV"
                        },
                        new
                        {
                            Id = new Guid("7447d53a-4941-4bc8-92ea-150ef98653fb"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min gaming"
                        },
                        new
                        {
                            Id = new Guid("48836ac2-04aa-406e-b642-5be94086919c"),
                            Description = "",
                            Propability = 1000,
                            Title = "One podcast episode"
                        },
                        new
                        {
                            Id = new Guid("ddacac00-ec62-42aa-bf6f-6d61f68fd21c"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min book reading"
                        },
                        new
                        {
                            Id = new Guid("e844a438-f241-426f-a67a-398d737270c0"),
                            Description = "",
                            Propability = 1000,
                            Title = "Beer"
                        },
                        new
                        {
                            Id = new Guid("b1130e07-a160-4d79-a6b5-d5de1b9ee20d"),
                            Description = "",
                            Propability = 200,
                            Title = "Glas of Wine"
                        },
                        new
                        {
                            Id = new Guid("9eb99926-e103-4874-a31a-9f66bcf4ab11"),
                            Description = "",
                            Propability = 500,
                            Title = "Candy"
                        },
                        new
                        {
                            Id = new Guid("e4d06262-44d7-4def-b4d1-12386171bb5f"),
                            Description = "",
                            Propability = 500,
                            Title = "Soda"
                        },
                        new
                        {
                            Id = new Guid("d2819405-3dfd-48ae-9940-054fc6bb52b6"),
                            Description = "",
                            Propability = 1000,
                            Title = "Coffea"
                        },
                        new
                        {
                            Id = new Guid("8091d8b0-5b75-421b-8e2f-19f314abf4b1"),
                            Description = "Enjoy a cup of tea",
                            Propability = 1000,
                            Title = "Tea"
                        },
                        new
                        {
                            Id = new Guid("df59cb23-7daf-4659-973b-617fe4742bed"),
                            Description = "",
                            Propability = 100,
                            Title = "Outside lunch"
                        },
                        new
                        {
                            Id = new Guid("017c3b6f-07d8-46db-b6c7-387c4131e77f"),
                            Description = "",
                            Propability = 100,
                            Title = "Dessert after dinner"
                        },
                        new
                        {
                            Id = new Guid("ce8f60e7-35d0-49dd-862d-d6a1c3659e9a"),
                            Description = "",
                            Propability = 200,
                            Title = "Home made Pizza"
                        },
                        new
                        {
                            Id = new Guid("63409529-406d-418a-bb84-326a6c863312"),
                            Description = "",
                            Propability = 100,
                            Title = "Cinema"
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPartOfDailyTodoList")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsRewarded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b"),
                            TotalPoints = 0,
                            TotalPointsRewarded = 0
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("408ba2e9-43c6-4972-9125-c6b528ca1348"),
                            IsDone = false,
                            RewardId = new Guid("6959ec84-aa12-4182-abdb-10d001f43228"),
                            UserId = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b")
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.HasOne("TodoReward.Core.Models.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoReward.Core.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
