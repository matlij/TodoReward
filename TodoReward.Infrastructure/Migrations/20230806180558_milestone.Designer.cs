// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoReward.Infrastructure;

#nullable disable

namespace TodoReward.Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230806180558_milestone")]
    partial class milestone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("TodoReward.Core.Models.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Propability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d637223d-9372-4dce-ae1c-c48937696d9a"),
                            Description = "",
                            Propability = 10,
                            Title = "Go on a Weekend trip"
                        },
                        new
                        {
                            Id = new Guid("15b071f2-bda7-4470-bb11-7ef302332ffe"),
                            Description = "",
                            Propability = 1000,
                            Title = "One episode on TV"
                        },
                        new
                        {
                            Id = new Guid("6b65807f-c2a1-4c6f-bd25-ff8197971423"),
                            Description = "",
                            Propability = 1000,
                            Title = "One movie on TV"
                        },
                        new
                        {
                            Id = new Guid("cfc3c4cf-f652-4c62-bda9-1745d230f55b"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min gaming"
                        },
                        new
                        {
                            Id = new Guid("dd969f98-6400-4803-8140-68a1f6f86ddc"),
                            Description = "",
                            Propability = 1000,
                            Title = "One podcast episode"
                        },
                        new
                        {
                            Id = new Guid("c4488abe-e0b9-4369-a1b0-89ed107d63a0"),
                            Description = "",
                            Propability = 500,
                            Title = "30 min book reading"
                        },
                        new
                        {
                            Id = new Guid("6c9792ae-60e6-4946-866f-04dacc55bad1"),
                            Description = "",
                            Propability = 1000,
                            Title = "Beer"
                        },
                        new
                        {
                            Id = new Guid("34ac9300-5494-4c42-b43f-bfc1547ef6bd"),
                            Description = "",
                            Propability = 200,
                            Title = "Glas of Wine"
                        },
                        new
                        {
                            Id = new Guid("629a2829-dd9b-486e-a0e6-076c47d29658"),
                            Description = "",
                            Propability = 500,
                            Title = "Candy"
                        },
                        new
                        {
                            Id = new Guid("16828482-e0b9-4fff-9f61-d9fb886fc05b"),
                            Description = "",
                            Propability = 500,
                            Title = "Soda"
                        },
                        new
                        {
                            Id = new Guid("9fa6d9b3-1dea-4905-b67d-62ea94e4bcfa"),
                            Description = "",
                            Propability = 1000,
                            Title = "Coffea"
                        },
                        new
                        {
                            Id = new Guid("9d34543b-367f-46a4-acbf-26b5c525bbae"),
                            Description = "Enjoy a cup of tea",
                            Propability = 1000,
                            Title = "Tea"
                        },
                        new
                        {
                            Id = new Guid("b9795bd2-d8bf-4027-81ba-7c9e40a6c20e"),
                            Description = "",
                            Propability = 100,
                            Title = "Outside lunch"
                        },
                        new
                        {
                            Id = new Guid("b218083c-0cf0-416a-bf8b-861ca0bf61c7"),
                            Description = "",
                            Propability = 100,
                            Title = "Dessert after dinner"
                        },
                        new
                        {
                            Id = new Guid("58d75dd1-7a84-4fb1-8d43-4ac7def320f4"),
                            Description = "",
                            Propability = 200,
                            Title = "Home made Pizza"
                        },
                        new
                        {
                            Id = new Guid("cb23d905-326f-44bf-b1e3-ee074f5a1056"),
                            Description = "",
                            Propability = 100,
                            Title = "Cinema"
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPartOfDailyTodoList")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MilstonesReached")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsRewarded")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b"),
                            MilstonesReached = 0,
                            TotalPoints = 0,
                            TotalPointsRewarded = 0
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRewards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b2d8fd3-bdf7-4325-912c-e4f160593749"),
                            IsDone = false,
                            RewardId = new Guid("d637223d-9372-4dce-ae1c-c48937696d9a"),
                            UserId = new Guid("03de3c78-5bda-4429-8147-7096c3d2f91b")
                        });
                });

            modelBuilder.Entity("TodoReward.Core.Models.UserReward", b =>
                {
                    b.HasOne("TodoReward.Core.Models.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TodoReward.Core.Models.User", "User")
                        .WithMany("Rewards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoReward.Core.Models.User", b =>
                {
                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
